import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

class TimetableState with ChangeNotifier {
  bool isGrid = false;
  late String selectedWeekday;

  // ‚úÖ ‡πÉ‡∏ä‡πâ 10.0.2.2 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Android Emulator (‡πÅ‡∏ó‡∏ô localhost)
  final String apiUrl = "http://10.0.2.2:8000/timetable";

  final List<String> days = ['‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå', '‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£', '‡∏û‡∏∏‡∏ò', '‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ', '‡∏®‡∏∏‡∏Å‡∏£‡πå'];
  final List<String> times = [
    '08:00-09:00',
    '09:00-10:00',
    '10:00-11:00',
    '11:00-12:00',
    '13:00-14:00',
    '14:00-15:00',
    '15:00-16:00',
  ];

  final Map<String, String> _subjects = {}; // key = "day|time" ‚Üí subject
  final Map<String, int> _ids = {};         // key = "day|time" ‚Üí id

  Map<String, String> get subjects => _subjects;

  TimetableState() {
    selectedWeekday = _getTodayThaiName();
  }

  String _getTodayThaiName() {
    final now = DateTime.now();
    switch (now.weekday) {
      case DateTime.monday:
        return '‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå';
      case DateTime.tuesday:
        return '‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£';
      case DateTime.wednesday:
        return '‡∏û‡∏∏‡∏ò';
      case DateTime.thursday:
        return '‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ';
      case DateTime.friday:
        return '‡∏®‡∏∏‡∏Å‡∏£‡πå';
      default:
        return '‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå';
    }
  }

  /// ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API
  Future<void> loadFromApi(String userId) async {
    try {
      final res = await http.get(Uri.parse("$apiUrl/$userId"));
      if (res.statusCode == 200) {
        final data = jsonDecode(res.body);
        _subjects.clear();
        _ids.clear();
        for (var item in data) {
          final key = "${item['day']}|${item['time']}";
          _subjects[key] = item['subject'];
          _ids[key] = item['id'];
        }
        notifyListeners();
      } else {
        debugPrint("‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${res.statusCode} ${res.body}");
      }
    } catch (e) {
      debugPrint("error loadFromApi: $e");
    }
  }

  /// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ß‡∏¥‡∏ä‡∏≤
  Future<void> updateSubject(
      String userId, String day, String time, String subject) async {
    final key = '$day|$time';
    final id = _ids[key]; // mapping day|time ‚Üí id

    if (id != null) {
      // ‚úÖ PUT ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
      final res = await http.put(
        Uri.parse("$apiUrl/$id"),
        headers: {"Content-Type": "application/json"},
        body: jsonEncode({
          "user_id": userId,
          "day": day,
          "time": time,
          "subject": subject,
        }),
      );

      if (res.statusCode == 200) {
        _subjects[key] = subject;
        notifyListeners();
      } else {
        debugPrint("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ß‡∏¥‡∏ä‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${res.statusCode} ${res.body}");
      }
    } else {
      // ‚úÖ POST ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
      final res = await http.post(
        Uri.parse(apiUrl),
        headers: {"Content-Type": "application/json"},
        body: jsonEncode({
          "user_id": userId,
          "day": day,
          "time": time,
          "subject": subject,
        }),
      );

      if (res.statusCode == 200 || res.statusCode == 201) { // üëà ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á 200 ‡πÅ‡∏•‡∏∞ 201
        final data = jsonDecode(res.body);
        _subjects[key] = subject;
        _ids[key] = data["id"]; // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö id ‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏≠‡∏ô update/delete
        notifyListeners();
      } else {
        debugPrint("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏¥‡∏ä‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${res.statusCode} ${res.body}");
      }
    }
  }

  /// ‡∏•‡∏ö‡∏ß‡∏¥‡∏ä‡∏≤
  Future<void> removeSubject(int id, String day, String time) async {
    try {
      final res = await http.delete(Uri.parse("$apiUrl/$id"));
      if (res.statusCode == 200) {
        final key = "$day|$time";
        _subjects.remove(key);
        _ids.remove(key);
        notifyListeners();
      } else {
        debugPrint("‡∏•‡∏ö‡∏ß‡∏¥‡∏ä‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${res.statusCode} ${res.body}");
      }
    } catch (e) {
      debugPrint("error removeSubject: $e");
    }
  }

  int? getIdFor(String day, String time) {
    return _ids["$day|$time"];
  }

  void toggleView() {
    isGrid = !isGrid;
    selectedWeekday = _getTodayThaiName();
    notifyListeners();
  }

  void setDay(String day) {
    selectedWeekday = day;
    notifyListeners();
  }

  void resetToToday() {
    selectedWeekday = _getTodayThaiName();
    notifyListeners();
  }
}
